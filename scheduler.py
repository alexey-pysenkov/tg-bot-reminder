import logging
from datetime import datetime

from aiogram import Router
from apscheduler.executors.asyncio import AsyncIOExecutor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select, update

from attachments.keyboards import create_sending_case_management_keyboard
from database.db import db
from database.models import Cases

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TIME_THRESHOLD_SECONDS = 30  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

scheduler = AsyncIOScheduler(executors={'default': AsyncIOExecutor()})
router = Router()


def get_unfinished_cases():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    return db.sql_query(
        query=select(Cases)
        .where(Cases.is_finished.is_(False)),
        is_single=False,
    )


def update_case_status(case_id, **fields):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ª–∞."""
    db.sql_query(
        update(Cases)
        .where(Cases.id == case_id)
        .values(**fields),
        is_update=True,
    )


def should_process_repeating_case(case, now):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –¥–µ–ª–æ."""
    deadline = case.deadline_date
    deadline_time = deadline.time()
    current_time = now.time()

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if deadline_time.hour != current_time.hour:
        return False
    if deadline_time.minute != current_time.minute:
        return False

    # –î–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if case.repeat == '–ï–∂–µ–º–µ—Å—è—á–Ω–æ' and deadline.day != now.day:
        return False

    # –î–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    if case.repeat == '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ' and deadline.weekday() != now.weekday():
        return False

    return True


async def process_nonrepeating_case(bot, case, now):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –¥–µ–ª–∞."""
    deadline = case.deadline_date
    time_diff = (now - deadline).total_seconds()

    if abs(time_diff) <= TIME_THRESHOLD_SECONDS:
        await send_reminder(bot, case)
        update_case_status(case.id, is_finished=True)


async def process_repeating_case(bot, case, now):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –¥–µ–ª–∞."""
    if should_process_repeating_case(case, now):
        await send_reminder(bot, case)
        update_case_status(case.id, last_notification=now)


async def check_and_send_reminders(bot):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    now = datetime.now()
    logger.info(f'Checking reminders at {now}')

    cases = get_unfinished_cases()

    for case_data in cases:
        case = case_data[0]
        logger.info(f'Processing case {case.id} (repeat: {case.repeat})')

        if case.repeat:
            await process_repeating_case(bot, case, now)
        else:
            await process_nonrepeating_case(bot, case, now)


async def send_reminder(bot, case):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    management_keyboard = create_sending_case_management_keyboard(case.id)
    formatted_date = case.deadline_date.strftime('%Y-%m-%d %H:%M')
    reminder_msg = '\n'.join([
        f'üìÖ {formatted_date}',
        f'üîπ {case.name}',
        f'üìù {case.description}',
        f'üîÑ –ü–æ–≤—Ç–æ—Ä: {case.repeat}',
    ])

    await bot.send_message(
        chat_id=case.user_id,
        text=reminder_msg,
        reply_markup=management_keyboard,
    )
